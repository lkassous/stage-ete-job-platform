version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: cv-database
    environment:
      POSTGRES_DB: cv_filtering_db
      POSTGRES_USER: cv_user
      POSTGRES_PASSWORD: cv_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - cv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cv_user -d cv_filtering_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Laravel
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cv-backend
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=database
      - DB_PORT=5432
      - DB_DATABASE=cv_filtering_db
      - DB_USERNAME=cv_user
      - DB_PASSWORD=cv_password
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - cv-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Angular
  frontend:
    build:
      context: ./example-app-frontend
      dockerfile: Dockerfile
    container_name: cv-frontend
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:8000/api
    networks:
      - cv-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: cv-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - cv-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  cv-network:
    driver: bridge
