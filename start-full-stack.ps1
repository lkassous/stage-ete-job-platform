# Script PowerShell pour d√©marrer la stack compl√®te CV Filtering System
# Frontend Angular + Backend Laravel + PostgreSQL + Nginx

Write-Host "üöÄ D√©marrage du CV Filtering System - Full Stack" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# Fonction pour afficher les messages color√©s
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# V√©rifier si Docker est install√©
try {
    docker --version | Out-Null
    Write-Success "Docker est install√© ‚úì"
} catch {
    Write-Error "Docker n'est pas install√©. Veuillez installer Docker Desktop."
    exit 1
}

# V√©rifier si Docker Compose est install√©
try {
    docker-compose --version | Out-Null
    Write-Success "Docker Compose est install√© ‚úì"
} catch {
    Write-Error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose."
    exit 1
}

# V√©rifier si Docker est en cours d'ex√©cution
Write-Status "V√©rification de Docker..."
try {
    docker info | Out-Null
    Write-Success "Docker est en cours d'ex√©cution ‚úì"
} catch {
    Write-Error "Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
}

# Arr√™ter les conteneurs existants s'ils existent
Write-Status "Arr√™t des conteneurs existants..."
docker-compose -f docker-compose.full-stack.yml down --remove-orphans

# Nettoyer les ressources Docker
Write-Status "Nettoyage des ressources Docker..."
docker system prune -f

# Construire et d√©marrer les services
Write-Status "Construction et d√©marrage des services..."
Write-Warning "Cela peut prendre plusieurs minutes lors du premier d√©marrage..."

# D√©marrer la base de donn√©es en premier
Write-Status "D√©marrage de la base de donn√©es PostgreSQL..."
docker-compose -f docker-compose.full-stack.yml up -d database

# Attendre que la base de donn√©es soit pr√™te
Write-Status "Attente de la base de donn√©es..."
Start-Sleep -Seconds 10

# V√©rifier si la base de donn√©es est pr√™te
$dbReady = $false
$attempts = 0
while (-not $dbReady -and $attempts -lt 30) {
    try {
        docker-compose -f docker-compose.full-stack.yml exec -T database pg_isready -U cv_user -d cv_filtering_db | Out-Null
        $dbReady = $true
        Write-Success "Base de donn√©es PostgreSQL pr√™te ‚úì"
    } catch {
        Write-Status "En attente de PostgreSQL... ($($attempts + 1)/30)"
        Start-Sleep -Seconds 2
        $attempts++
    }
}

if (-not $dbReady) {
    Write-Warning "La base de donn√©es met du temps √† d√©marrer, continuons..."
}

# D√©marrer le backend Laravel
Write-Status "D√©marrage du backend Laravel..."
docker-compose -f docker-compose.full-stack.yml up -d backend

# Attendre que le backend soit pr√™t
Write-Status "Attente du backend Laravel..."
Start-Sleep -Seconds 15

# V√©rifier si le backend est pr√™t
$backendReady = $false
for ($i = 1; $i -le 30; $i++) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/health" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            $backendReady = $true
            Write-Success "Backend Laravel pr√™t ‚úì"
            break
        }
    } catch {
        Write-Status "En attente du backend Laravel... ($i/30)"
        Start-Sleep -Seconds 2
    }
}

if (-not $backendReady) {
    Write-Warning "Le backend Laravel met du temps √† d√©marrer, continuons..."
}

# D√©marrer le frontend Angular
Write-Status "D√©marrage du frontend Angular..."
docker-compose -f docker-compose.full-stack.yml up -d frontend

# Attendre que le frontend soit pr√™t
Write-Status "Attente du frontend Angular..."
Start-Sleep -Seconds 10

# D√©marrer Nginx (reverse proxy)
Write-Status "D√©marrage du reverse proxy Nginx..."
docker-compose -f docker-compose.full-stack.yml up -d nginx

# Attendre que tous les services soient pr√™ts
Write-Status "V√©rification finale des services..."
Start-Sleep -Seconds 5

# Afficher le statut des services
Write-Status "Statut des services:"
docker-compose -f docker-compose.full-stack.yml ps

Write-Host ""
Write-Host "üéâ D√©marrage termin√© !" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan
Write-Host ""
Write-Success "‚úÖ Application disponible sur:"
Write-Host "   üåê Frontend (via Nginx): http://localhost" -ForegroundColor White
Write-Host "   üîß Backend API: http://localhost/api" -ForegroundColor White
Write-Host "   üìä Frontend direct: http://localhost:3000" -ForegroundColor White
Write-Host "   üöÄ Backend direct: http://localhost:8000" -ForegroundColor White
Write-Host "   üóÑÔ∏è  Base de donn√©es: localhost:5432" -ForegroundColor White
Write-Host ""
Write-Status "üìã Informations de connexion √† la base de donn√©es:"
Write-Host "   Host: localhost" -ForegroundColor White
Write-Host "   Port: 5432" -ForegroundColor White
Write-Host "   Database: cv_filtering_db" -ForegroundColor White
Write-Host "   Username: cv_user" -ForegroundColor White
Write-Host "   Password: cv_password" -ForegroundColor White
Write-Host ""
Write-Status "üõ†Ô∏è  Commandes utiles:"
Write-Host "   Voir les logs: docker-compose -f docker-compose.full-stack.yml logs -f" -ForegroundColor White
Write-Host "   Arr√™ter: docker-compose -f docker-compose.full-stack.yml down" -ForegroundColor White
Write-Host "   Red√©marrer: docker-compose -f docker-compose.full-stack.yml restart" -ForegroundColor White
Write-Host ""
Write-Warning "‚ö†Ô∏è  Si vous rencontrez des probl√®mes, v√©rifiez les logs avec:"
Write-Host "   docker-compose -f docker-compose.full-stack.yml logs [service_name]" -ForegroundColor White
Write-Host ""
Write-Success "üöÄ Votre syst√®me de filtrage CV est maintenant op√©rationnel !"

# Ouvrir automatiquement le navigateur
Write-Status "Ouverture du navigateur..."
Start-Process "http://localhost"
